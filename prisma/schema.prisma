// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  YES
  NO
}

enum Payment {
  cash
  transfer
}

enum UserLevel {
  admin
  kasir
}

model Category {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(40)
  isActive  Status @default(YES)
  products  Product[]
  vendorProducts VendorProduct[]
  createdAt DateTime    @default(now())
  updatedAt DateTime?    @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(40)
  purchasePrice Int
  retailPrice   Int
  wholesalePrice Int
  stock        Int
  stocks       Stock[]
  minStock     Int
  barcode      String      @unique @db.VarChar(50)
  image        String?      @db.VarChar(100)
  categoryId   Int
  size         Int
  unit         String      @db.VarChar(20)
  isActive     Status @default(YES)

  category     Category    @relation(fields: [categoryId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?    @updatedAt
  saleDetails  SaleDetail[]
  purchaseDetails   PurchaseDetail[]
}

model ProductUnit {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(40)
  isActive  Status @default(YES)
  createdAt DateTime    @default(now())
  updatedAt DateTime?    @updatedAt
}

model Member {
  nip         String      @id @db.VarChar(10)
  name        String?     @db.VarChar(50)
  accountNumber String   @unique @db.VarChar(20)
  bank        String      @db.VarChar(20)
  phoneNumber String      @db.VarChar(15)
  address     String      @db.Text
  creditLimit Int
  isActive    Status @default(YES)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?    @updatedAt
  sales       Sale[]
}

model Management {
  id              Int         @id @default(autoincrement())
  name            String      @db.VarChar(50)
  isActive        Status @default(YES)
  managementDetails ManagementDetail[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime?    @updatedAt
}

model ManagementDetail {
  id              Int         @id @default(autoincrement())
  year            Int         @db.Year
  nip             String      @db.VarChar(20) // MUST BE SCALAR
  managementId    Int    
  startDate       DateTime    @db.Date
  endDate         DateTime    @db.Date
  allowance       Decimal?    @db.Decimal(10,2)
  isActive        Status @default(YES)

  management      Management  @relation(fields: [managementId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime?    @updatedAt
}


model Supplier {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(100)
  address      String      @db.Text
  phoneNumber  String      @db.VarChar(15)
  company      String      @db.VarChar(100)
  isActive     Status @default(YES)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?    @updatedAt
  purchases     Purchase[]
}

model Staff {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(100)
  phoneNumber  String      @db.VarChar(15)
  username     String      @unique @db.VarChar(50)
  password     String      @db.VarChar(255)
  isActive     Status @default(YES)
  level        UserLevel
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?    @updatedAt
}

model Vendor {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(40)
  phoneNumber     String            @db.VarChar(15)
  address         String            @db.Text
  isActive        Status      @default(YES)
  products        VendorProduct[]       
  createdAt DateTime    @default(now())
  updatedAt DateTime?    @updatedAt
}


model VendorProduct {
  id              Int               @id @default(autoincrement())
  vendorId        Int
  name            String            @db.VarChar(40)
  categoryId      Int
  sellPrice       Float
  profitPercent   Float             
  entryDate       DateTime          @default(now())
  createdAt DateTime    @default(now())
  updatedAt DateTime?    @updatedAt
  
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  
}

model Stock {
  id                   Int               @id @default(autoincrement())
  productId            Int              
  purchasePrice        Int
  stock                Int 
  entryDate            DateTime     @default(now())

  product    Product @relation(fields : [productId], references : [id])
  saleDetails          SaleDetail[]
  PurchaseToDetails    PurchaseDetail[]
}

model Sale {
  id          Int           @id @default(autoincrement())
  saleDate    DateTime      @default(now())
  nip         String
  totalAmount Float
  paymentType Payment       
  isPaid      Status
  isCash      Status
  details     SaleDetail[] 
  member      Member    @relation(fields : [nip], references : [nip])
}

model SaleDetail {
  id            Int     @id @default(autoincrement())
  saleId        Int
  productId     Int
  stockId       Int
  purchasePrice Float
  salePrice     Float
  quantity      Int
  sale          Sale    @relation(fields: [saleId], references : [id])
  product       Product @relation(fields: [productId], references : [id])
  stock         Stock   @relation(fields: [stockId], references : [id])
}

model Purchase {
  id           Int              @id @default(autoincrement())
  purchaseDate DateTime
  supplierId   Int
  totalAmount  Float
  isPaid       Status
  details      PurchaseDetail[] 
  supplier     Supplier @relation(fields : [supplierId] , references : [id])
}

model PurchaseDetail {
  id             Int     @id @default(autoincrement())
  purchaseId     Int
  productId      Int
  stockId        Int
  purchasePrice  Float
  retailPrice    Float
  wholesalePrice Float
  quantity       Int
  subtotal       Float
  purchase       Purchase @relation(fields: [purchaseId], references: [id])
  product        Product  @relation(fields: [productId], references: [id])
  stock          Stock    @relation(fields: [stockId], references: [id])
}
